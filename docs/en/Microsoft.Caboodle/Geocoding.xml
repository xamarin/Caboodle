<Type Name="Geocoding" FullName="Microsoft.Caboodle.Geocoding">
  <TypeSignature Language="C#" Value="public static class Geocoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Geocoding extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Caboodle</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Easily convert between geographic coordinated and place names.</summary>
    <remarks>
      <para></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetLocationsAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Caboodle.Location&gt;&gt; GetLocationsAsync (string address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Caboodle.Location&gt;&gt; GetLocationsAsync(string address) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Caboodle.Geocoding/&lt;GetLocationsAsync&gt;d__6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Caboodle.Location&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="address">Address to retrieve the lcoation for.</param>
        <summary>Retrieve location for a given address.</summary>
        <returns>
          <para>List of locations that best match the address or null if none found.</para>
        </returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlacemarksAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Caboodle.Placemark&gt;&gt; GetPlacemarksAsync (Microsoft.Caboodle.Location location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Caboodle.Placemark&gt;&gt; GetPlacemarksAsync(class Microsoft.Caboodle.Location location) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Caboodle.Placemark&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Microsoft.Caboodle.Location" />
      </Parameters>
      <Docs>
        <param name="location">Location to find placemarks for.</param>
        <summary>Retrieve placemarks for a given location.</summary>
        <returns>List of placemarks or null if no placemarks are found.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlacemarksAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Caboodle.Placemark&gt;&gt; GetPlacemarksAsync (double latitude, double longitude);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Caboodle.Placemark&gt;&gt; GetPlacemarksAsync(float64 latitude, float64 longitude) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(Microsoft.Caboodle.Geocoding/&lt;GetPlacemarksAsync&gt;d__5))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Caboodle.Placemark&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="latitude" Type="System.Double" />
        <Parameter Name="longitude" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="latitude">Latitude of the location.</param>
        <param name="longitude">Longitude of the location.</param>
        <summary>Retrieve location for a given address.</summary>
        <returns>List of placemarks or null if no placemarks are found.</returns>
        <remarks>
          <para></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapKey">
      <MemberSignature Language="C#" Value="public static string MapKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string MapKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get or sets the map API key.</summary>
        <value>The current key for maps.</value>
        <remarks>Needed only for UWP and can be generated from Bing Maps.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
