<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    ============================================================
    SetupMDoc

    Set all the variables needed for mdoc.
    This runs during the build and package phases.
    ============================================================
  -->
  <Target Name="_MDocSetup">
    <PropertyGroup>
      <_ManagedExeLauncher Condition=" '$(OS)' != 'Windows_NT' And Exists ('/Library/Frameworks/Mono.framework/Versions/Current/bin/mono') ">/Library/Frameworks/Mono.framework/Versions/Current/bin/mono</_ManagedExeLauncher>
      <_ManagedExeLauncher Condition=" '$(OS)' != 'Windows_NT' And Exists ('/usr/local/bin/mono') ">/usr/local/bin/mono</_ManagedExeLauncher>
      <_ManagedExeLauncher Condition=" '$(OS)' != 'Windows_NT' And Exists ('/usr/bin/mono') ">/usr/bin/mono</_ManagedExeLauncher>
      <_ManagedExeLauncher Condition=" '$(OS)' != 'Windows_NT' And '$(_ManagedExeLauncher)' == '' ">mono</_ManagedExeLauncher>
      <MDocVersion Condition=" '%(Identity)' == 'mdoc' ">@(PackageReference -> '%(Version)')</MDocVersion>
      <MDocPackagePath Condition=" '%(Name)' == 'mdoc' ">@(PackageDefinitions -> '%(ResolvedPath)')</MDocPackagePath>
      <MDocPackagePath Condition=" '$(MDocPackagePath)' == '' ">$(NuGetPackageRoot)\mdoc\$(MDocVersion)</MDocPackagePath>
      <MDocToolPath>$(MDocPackagePath)\tools\mdoc.exe</MDocToolPath>
      <MDocOutputName>$(TargetName).xml</MDocOutputName>
      <MDocOutputPath>$(TargetDir)$(MDocOutputName)</MDocOutputPath>
      <_ShouldGenerateDocs Condition=" '$(MDocDocumentationDirectory)' != '' and Exists('$(MDocDocumentationDirectory)\index.xml') ">true</_ShouldGenerateDocs>
    </PropertyGroup>
  </Target>

  <!--
    ============================================================
    MDocGenerateDocs

    Generated the XML documentation file using mdoc.
    This runs during the build phase.
    ============================================================
  -->
  <Target Name="MDocGenerateDocs"
          AfterTargets="CoreCompile" DependsOnTargets="_MDocSetup">
    <ItemGroup Condition=" '$(_ShouldGenerateDocs)' == 'true' ">
      <FileWrites Include="$(MDocOutputPath)" />
    </ItemGroup>
    <Exec Condition=" '$(_ShouldGenerateDocs)' == 'true' "
          Command="$(_ManagedExeLauncher) &quot;$(MDocToolPath)&quot; export-msxdoc --out=&quot;$(MDocOutputPath)&quot; &quot;$(MDocDocumentationDirectory)&quot;" />
  </Target>

  <!--
    ============================================================
    MDocAddFilesToPackage

    Make sure the mdoc output goes into the final package.
    This runs during the package phase.
    ============================================================
  -->
  <Target Name="MDocAddFilesToPackage"
          BeforeTargets="_GetBuildOutputFilesWithTfm" DependsOnTargets="_MDocSetup">
    <ItemGroup Condition=" '$(_ShouldGenerateDocs)' == 'true' ">
      <BuildOutputInPackage Include="$(MDocOutputPath)" TargetFramework="$(TargetFramework)" TargetPath="$(MDocOutputName)" />
    </ItemGroup>
  </Target>

  <!--
    ============================================================
    MDocUpdateDocs

    Update the docs in the documentation directory using the
    compiled assemblies.
    This runs as a separate task.
    ============================================================
  -->
  <Target Name="MDocUpdateDocs"
          DependsOnTargets="_MDocSetup">
    <!-- bits for resolving references on Windows -->
    <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' ">
      <FrameowrkReferenceAssemblyPath>$(DevEnvDir)\ReferenceAssemblies\Microsoft\Framework</FrameowrkReferenceAssemblyPath>
    </PropertyGroup>
    <ItemGroup Condition=" '$(OS)' == 'Windows_NT' ">
      <MDocReferenceAssembly Include="$(FrameowrkReferenceAssemblyPath)\MonoAndroid\v1.0" />
      <MDocReferenceAssembly Include="$(FrameowrkReferenceAssemblyPath)\MonoAndroid\v4.0.3" />
      <MDocReferenceAssembly Include="$(FrameowrkReferenceAssemblyPath)\Xamarin.iOS\v1.0" />
      <MDocReferenceAssembly Include="$(FrameowrkReferenceAssemblyPath)\Xamarin.TVOS\v1.0" />
      <MDocReferenceAssembly Include="$(FrameowrkReferenceAssemblyPath)\Xamarin.WatchOS\v1.0" />
      <MDocReferenceAssembly Include="$(FrameowrkReferenceAssemblyPath)\Xamarin.Mac\v2.0" />
    </ItemGroup>
    <PropertyGroup Condition=" '$(OS)' == 'Windows_NT' ">
      <MDocReferenceAssemblies>@(MDocReferenceAssembly -> '--lib=&quot;%(Identity)&quot;', ' ')</MDocReferenceAssemblies>
    </PropertyGroup>
    <!-- the actual task -->
    <PropertyGroup>
      <BinConfigDir>$(MSBuildProjectDirectory)\bin\$(Configuration)\</BinConfigDir>
      <TmpDir>$(MSBuildProjectDirectory)\tmp\</TmpDir>
    </PropertyGroup>
    <RemoveDir Directories="$(TmpDir)" />
    <MakeDir Directories="$(TmpDir)" />
    <Copy SourceFiles="$(MDocDocumentationDirectory)\..\frameworks.xml" DestinationFolder="$(TmpDir)" />
    <Copy SourceFiles="$(BinConfigDir)netstandard2.0\$(AssemblyName).dll" DestinationFolder="$(TmpDir)xamarin-essentials" />
    <Copy SourceFiles="$(BinConfigDir)monoandroid81\$(AssemblyName).dll" DestinationFolder="$(TmpDir)xamarin-essentials-android" />
    <Copy SourceFiles="$(BinConfigDir)xamarin.ios10\$(AssemblyName).dll" DestinationFolder="$(TmpDir)xamarin-essentials-ios" />
    <Copy SourceFiles="$(BinConfigDir)uap10.0.16299\$(AssemblyName).dll" DestinationFolder="$(TmpDir)xamarin-essentials-uwp" />
    <Exec Command="$(_ManagedExeLauncher) &quot;$(MDocToolPath)&quot; update -lang=DocId --delete --frameworks=&quot;$(TmpDir)frameworks.xml&quot; --out=&quot;$(MDocDocumentationDirectory)&quot; $(MDocReferenceAssemblies)" />
    <_FormatDocs DocsRoot="$(MDocDocumentationDirectory)" />
    <_VerifyAllDocsAreComplete DocsRoot="$(MDocDocumentationDirectory)" />
  </Target>

  <!--
    ============================================================
    MDocVerifyDocs

    Makes sure all the docs are filled in.
    This runs as a separate task.
    ============================================================
  -->
  <Target Name="MDocVerifyDocs"
          DependsOnTargets="_MDocSetup">
    <_VerifyAllDocsAreComplete DocsRoot="$(MDocDocumentationDirectory)" />
  </Target>

  <!--
    ===================================================================================================================
    _FormatDocs

    Make sure the docs are all uniform after editing in various apps or tools.
    ===================================================================================================================
  -->
  <UsingTask TaskName="_FormatDocs" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >  
    <ParameterGroup>
      <DocsRoot ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System.Xml" />
      <Using Namespace="System.Xml.Linq" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        foreach (var file in Directory.EnumerateFiles(DocsRoot, "*.xml", SearchOption.AllDirectories)) {
          var xdoc = XDocument.Load(file);
          var settings = new XmlWriterSettings {
              Encoding = new UTF8Encoding(),
              Indent = true,
              NewLineChars = "\n",
              OmitXmlDeclaration = true,
          };
          using (var writer = XmlWriter.Create(file, settings)) {
              xdoc.Save(writer);
              writer.Flush();
          }
          File.AppendAllText(file, "\n");
        }
      ]]></Code>
    </Task>
  </UsingTask>

  <!--
    ===================================================================================================================
    _VerifyAllDocsAreComplete

    Make sure the docs are all filled in.
    ===================================================================================================================
  -->
  <UsingTask TaskName="_VerifyAllDocsAreComplete" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >  
    <ParameterGroup>
      <DocsRoot ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml" />
      <Reference Include="System.Xml.Linq" />
      <Using Namespace="System.Xml" />
      <Using Namespace="System.Xml.Linq" />
      <Code Type="Fragment" Language="cs"><![CDATA[
        foreach (var file in Directory.EnumerateFiles(DocsRoot, "*.xml", SearchOption.AllDirectories)) {
          var xdoc = XDocument.Load(file);
          var incomplete = xdoc.Descendants("Member").Where(x => x.Descendants().Any(d => d.Value == "To be added."));
          foreach (var node in incomplete) {
            var typename = xdoc.Root.Attribute("FullName").Value;
            var member = node.Attribute("MemberName").Value;
            var memberType = node.Element("MemberType").Value.ToLower();
            Log.LogWarning("Missing docs for {2} '{0}.{1}'.", typename, member, memberType);
          }
        }
      ]]></Code>
    </Task>
  </UsingTask>

</Project>